/*
 * This file is generated by jOOQ.
 */
package com.ciba.gameoptimizerapi.models.jooq;


import com.ciba.gameoptimizerapi.models.jooq.tables.ComponentCombos;
import com.ciba.gameoptimizerapi.models.jooq.tables.Components;
import com.ciba.gameoptimizerapi.models.jooq.tables.Games;
import com.ciba.gameoptimizerapi.models.jooq.tables.PerformanceFiles;
import com.ciba.gameoptimizerapi.models.jooq.tables.Users;
import com.ciba.gameoptimizerapi.models.jooq.tables.records.ComponentCombosRecord;
import com.ciba.gameoptimizerapi.models.jooq.tables.records.ComponentsRecord;
import com.ciba.gameoptimizerapi.models.jooq.tables.records.GamesRecord;
import com.ciba.gameoptimizerapi.models.jooq.tables.records.PerformanceFilesRecord;
import com.ciba.gameoptimizerapi.models.jooq.tables.records.UsersRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * gaming_optimizer.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ComponentCombosRecord> COMPONENT_COMBOS_PKEY = Internal.createUniqueKey(ComponentCombos.COMPONENT_COMBOS, DSL.name("component_combos_pkey"), new TableField[] { ComponentCombos.COMPONENT_COMBOS.ID }, true);
    public static final UniqueKey<ComponentsRecord> COMPONENTS_PKEY = Internal.createUniqueKey(Components.COMPONENTS, DSL.name("components_pkey"), new TableField[] { Components.COMPONENTS.ID }, true);
    public static final UniqueKey<GamesRecord> GAMES_NAME_KEY = Internal.createUniqueKey(Games.GAMES, DSL.name("games_name_key"), new TableField[] { Games.GAMES.NAME }, true);
    public static final UniqueKey<GamesRecord> GAMES_PKEY = Internal.createUniqueKey(Games.GAMES, DSL.name("games_pkey"), new TableField[] { Games.GAMES.ID }, true);
    public static final UniqueKey<PerformanceFilesRecord> PERFORMANCE_FILES_PKEY = Internal.createUniqueKey(PerformanceFiles.PERFORMANCE_FILES, DSL.name("performance_files_pkey"), new TableField[] { PerformanceFiles.PERFORMANCE_FILES.ID }, true);
    public static final UniqueKey<UsersRecord> USERS_PKEY = Internal.createUniqueKey(Users.USERS, DSL.name("users_pkey"), new TableField[] { Users.USERS.ID }, true);
    public static final UniqueKey<UsersRecord> USERS_USERNAME_KEY = Internal.createUniqueKey(Users.USERS, DSL.name("users_username_key"), new TableField[] { Users.USERS.USERNAME }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<ComponentCombosRecord, ComponentsRecord> COMPONENT_COMBOS__GRAPHICS_CARD_FKEY = Internal.createForeignKey(ComponentCombos.COMPONENT_COMBOS, DSL.name("graphics_card_fkey"), new TableField[] { ComponentCombos.COMPONENT_COMBOS.GRAPHICS_CARD_ID }, Keys.COMPONENTS_PKEY, new TableField[] { Components.COMPONENTS.ID }, true);
    public static final ForeignKey<ComponentCombosRecord, ComponentsRecord> COMPONENT_COMBOS__PROCESSOR_FKEY = Internal.createForeignKey(ComponentCombos.COMPONENT_COMBOS, DSL.name("processor_fkey"), new TableField[] { ComponentCombos.COMPONENT_COMBOS.PROCESSOR_ID }, Keys.COMPONENTS_PKEY, new TableField[] { Components.COMPONENTS.ID }, true);
    public static final ForeignKey<ComponentCombosRecord, ComponentsRecord> COMPONENT_COMBOS__RAM_FKEY = Internal.createForeignKey(ComponentCombos.COMPONENT_COMBOS, DSL.name("ram_fkey"), new TableField[] { ComponentCombos.COMPONENT_COMBOS.RAM_ID }, Keys.COMPONENTS_PKEY, new TableField[] { Components.COMPONENTS.ID }, true);
    public static final ForeignKey<PerformanceFilesRecord, ComponentCombosRecord> PERFORMANCE_FILES__COMPONENTS_COMBO_FKEY = Internal.createForeignKey(PerformanceFiles.PERFORMANCE_FILES, DSL.name("components_combo_fkey"), new TableField[] { PerformanceFiles.PERFORMANCE_FILES.COMPONENTS_COMBO_ID }, Keys.COMPONENT_COMBOS_PKEY, new TableField[] { ComponentCombos.COMPONENT_COMBOS.ID }, true);
    public static final ForeignKey<PerformanceFilesRecord, UsersRecord> PERFORMANCE_FILES__USER_FKEY = Internal.createForeignKey(PerformanceFiles.PERFORMANCE_FILES, DSL.name("user_fkey"), new TableField[] { PerformanceFiles.PERFORMANCE_FILES.USER_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.ID }, true);
}
