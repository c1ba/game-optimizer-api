/*
 * This file is generated by jOOQ.
 */
package com.ciba.gameoptimizerapi.models.jooq.tables;


import com.ciba.gameoptimizerapi.models.jooq.GamingOptimizer;
import com.ciba.gameoptimizerapi.models.jooq.Keys;
import com.ciba.gameoptimizerapi.models.jooq.tables.records.ComponentCombosRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ComponentCombos extends TableImpl<ComponentCombosRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gaming_optimizer.component_combos</code>
     */
    public static final ComponentCombos COMPONENT_COMBOS = new ComponentCombos();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ComponentCombosRecord> getRecordType() {
        return ComponentCombosRecord.class;
    }

    /**
     * The column <code>gaming_optimizer.component_combos.id</code>.
     */
    public final TableField<ComponentCombosRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>gaming_optimizer.component_combos.processor_id</code>.
     */
    public final TableField<ComponentCombosRecord, UUID> PROCESSOR_ID = createField(DSL.name("processor_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column
     * <code>gaming_optimizer.component_combos.graphics_card_id</code>.
     */
    public final TableField<ComponentCombosRecord, UUID> GRAPHICS_CARD_ID = createField(DSL.name("graphics_card_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>gaming_optimizer.component_combos.ram_id</code>.
     */
    public final TableField<ComponentCombosRecord, UUID> RAM_ID = createField(DSL.name("ram_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>gaming_optimizer.component_combos.created_at</code>.
     */
    public final TableField<ComponentCombosRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    private ComponentCombos(Name alias, Table<ComponentCombosRecord> aliased) {
        this(alias, aliased, null);
    }

    private ComponentCombos(Name alias, Table<ComponentCombosRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gaming_optimizer.component_combos</code> table
     * reference
     */
    public ComponentCombos(String alias) {
        this(DSL.name(alias), COMPONENT_COMBOS);
    }

    /**
     * Create an aliased <code>gaming_optimizer.component_combos</code> table
     * reference
     */
    public ComponentCombos(Name alias) {
        this(alias, COMPONENT_COMBOS);
    }

    /**
     * Create a <code>gaming_optimizer.component_combos</code> table reference
     */
    public ComponentCombos() {
        this(DSL.name("component_combos"), null);
    }

    public <O extends Record> ComponentCombos(Table<O> child, ForeignKey<O, ComponentCombosRecord> key) {
        super(child, key, COMPONENT_COMBOS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : GamingOptimizer.GAMING_OPTIMIZER;
    }

    @Override
    public UniqueKey<ComponentCombosRecord> getPrimaryKey() {
        return Keys.COMPONENT_COMBOS_PKEY;
    }

    @Override
    public List<ForeignKey<ComponentCombosRecord, ?>> getReferences() {
        return Arrays.asList(Keys.COMPONENT_COMBOS__PROCESSOR_FKEY, Keys.COMPONENT_COMBOS__GRAPHICS_CARD_FKEY, Keys.COMPONENT_COMBOS__RAM_FKEY);
    }

    private transient Components _processorFkey;
    private transient Components _graphicsCardFkey;
    private transient Components _ramFkey;

    /**
     * Get the implicit join path to the
     * <code>gaming_optimizer.components</code> table, via the
     * <code>processor_fkey</code> key.
     */
    public Components processorFkey() {
        if (_processorFkey == null)
            _processorFkey = new Components(this, Keys.COMPONENT_COMBOS__PROCESSOR_FKEY);

        return _processorFkey;
    }

    /**
     * Get the implicit join path to the
     * <code>gaming_optimizer.components</code> table, via the
     * <code>graphics_card_fkey</code> key.
     */
    public Components graphicsCardFkey() {
        if (_graphicsCardFkey == null)
            _graphicsCardFkey = new Components(this, Keys.COMPONENT_COMBOS__GRAPHICS_CARD_FKEY);

        return _graphicsCardFkey;
    }

    /**
     * Get the implicit join path to the
     * <code>gaming_optimizer.components</code> table, via the
     * <code>ram_fkey</code> key.
     */
    public Components ramFkey() {
        if (_ramFkey == null)
            _ramFkey = new Components(this, Keys.COMPONENT_COMBOS__RAM_FKEY);

        return _ramFkey;
    }

    @Override
    public ComponentCombos as(String alias) {
        return new ComponentCombos(DSL.name(alias), this);
    }

    @Override
    public ComponentCombos as(Name alias) {
        return new ComponentCombos(alias, this);
    }

    @Override
    public ComponentCombos as(Table<?> alias) {
        return new ComponentCombos(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ComponentCombos rename(String name) {
        return new ComponentCombos(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ComponentCombos rename(Name name) {
        return new ComponentCombos(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ComponentCombos rename(Table<?> name) {
        return new ComponentCombos(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<UUID, UUID, UUID, UUID, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super UUID, ? super UUID, ? super UUID, ? super UUID, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super UUID, ? super UUID, ? super UUID, ? super UUID, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
