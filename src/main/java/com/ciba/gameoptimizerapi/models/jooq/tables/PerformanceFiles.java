/*
 * This file is generated by jOOQ.
 */
package com.ciba.gameoptimizerapi.models.jooq.tables;


import com.ciba.gameoptimizerapi.models.jooq.GamingOptimizer;
import com.ciba.gameoptimizerapi.models.jooq.Keys;
import com.ciba.gameoptimizerapi.models.jooq.tables.records.PerformanceFilesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PerformanceFiles extends TableImpl<PerformanceFilesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gaming_optimizer.performance_files</code>
     */
    public static final PerformanceFiles PERFORMANCE_FILES = new PerformanceFiles();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PerformanceFilesRecord> getRecordType() {
        return PerformanceFilesRecord.class;
    }

    /**
     * The column <code>gaming_optimizer.performance_files.id</code>.
     */
    public final TableField<PerformanceFilesRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "");

    /**
     * The column
     * <code>gaming_optimizer.performance_files.components_combo_id</code>.
     */
    public final TableField<PerformanceFilesRecord, UUID> COMPONENTS_COMBO_ID = createField(DSL.name("components_combo_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>gaming_optimizer.performance_files.user_id</code>.
     */
    public final TableField<PerformanceFilesRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>gaming_optimizer.performance_files.game_id</code>.
     */
    public final TableField<PerformanceFilesRecord, UUID> GAME_ID = createField(DSL.name("game_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column
     * <code>gaming_optimizer.performance_files.performance_files_names</code>.
     */
    public final TableField<PerformanceFilesRecord, String[]> PERFORMANCE_FILES_NAMES = createField(DSL.name("performance_files_names"), SQLDataType.VARCHAR.getArrayDataType(), this, "");

    /**
     * The column <code>gaming_optimizer.performance_files.likes</code>.
     */
    public final TableField<PerformanceFilesRecord, Integer> LIKES = createField(DSL.name("likes"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>gaming_optimizer.performance_files.dislikes</code>.
     */
    public final TableField<PerformanceFilesRecord, Integer> DISLIKES = createField(DSL.name("dislikes"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>gaming_optimizer.performance_files.created_at</code>.
     */
    public final TableField<PerformanceFilesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    private PerformanceFiles(Name alias, Table<PerformanceFilesRecord> aliased) {
        this(alias, aliased, null);
    }

    private PerformanceFiles(Name alias, Table<PerformanceFilesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gaming_optimizer.performance_files</code> table
     * reference
     */
    public PerformanceFiles(String alias) {
        this(DSL.name(alias), PERFORMANCE_FILES);
    }

    /**
     * Create an aliased <code>gaming_optimizer.performance_files</code> table
     * reference
     */
    public PerformanceFiles(Name alias) {
        this(alias, PERFORMANCE_FILES);
    }

    /**
     * Create a <code>gaming_optimizer.performance_files</code> table reference
     */
    public PerformanceFiles() {
        this(DSL.name("performance_files"), null);
    }

    public <O extends Record> PerformanceFiles(Table<O> child, ForeignKey<O, PerformanceFilesRecord> key) {
        super(child, key, PERFORMANCE_FILES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : GamingOptimizer.GAMING_OPTIMIZER;
    }

    @Override
    public UniqueKey<PerformanceFilesRecord> getPrimaryKey() {
        return Keys.PERFORMANCE_FILES_PKEY;
    }

    @Override
    public List<ForeignKey<PerformanceFilesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PERFORMANCE_FILES__COMPONENTS_COMBO_FKEY, Keys.PERFORMANCE_FILES__USER_FKEY);
    }

    private transient ComponentCombos _componentCombos;
    private transient Users _users;

    /**
     * Get the implicit join path to the
     * <code>gaming_optimizer.component_combos</code> table.
     */
    public ComponentCombos componentCombos() {
        if (_componentCombos == null)
            _componentCombos = new ComponentCombos(this, Keys.PERFORMANCE_FILES__COMPONENTS_COMBO_FKEY);

        return _componentCombos;
    }

    /**
     * Get the implicit join path to the <code>gaming_optimizer.users</code>
     * table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.PERFORMANCE_FILES__USER_FKEY);

        return _users;
    }

    @Override
    public PerformanceFiles as(String alias) {
        return new PerformanceFiles(DSL.name(alias), this);
    }

    @Override
    public PerformanceFiles as(Name alias) {
        return new PerformanceFiles(alias, this);
    }

    @Override
    public PerformanceFiles as(Table<?> alias) {
        return new PerformanceFiles(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PerformanceFiles rename(String name) {
        return new PerformanceFiles(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PerformanceFiles rename(Name name) {
        return new PerformanceFiles(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PerformanceFiles rename(Table<?> name) {
        return new PerformanceFiles(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<UUID, UUID, UUID, UUID, String[], Integer, Integer, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super UUID, ? super UUID, ? super UUID, ? super UUID, ? super String[], ? super Integer, ? super Integer, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super UUID, ? super UUID, ? super UUID, ? super UUID, ? super String[], ? super Integer, ? super Integer, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
